{"ast":null,"code":"const randomNumber = () => Math.floor(Math.random() * 101);\n\nconst firstFunction = str => str.toUpperCase();\n\nconst secondFunction = str => str.charAt(0);\n\nconst thirdFunction = (str1, str2) => str1.concat(str2);\n\nCopiar;\n\nfunction fetchDog() {\n  return fetch(\"https://dog.ceo/api/breeds/image/random\").then(response => response.json().then(json => response.ok ? Promise.resolve(json) : Promise.reject(json)));\n}\n\nmodule.exports = {\n  fetchDog\n};\nmodule.exports = {\n  firstFunction,\n  secondFunction,\n  thirdFunction\n};\nmodule.exports = {\n  randomNumber\n};","map":{"version":3,"sources":["/home/thiago/Trybe/trybe-exercicios/frontend/bloco-14-testes-automaticos/dia-02-mocks-e-inputs/exercicio/exercicios/src/Service.js"],"names":["randomNumber","Math","floor","random","firstFunction","str","toUpperCase","secondFunction","charAt","thirdFunction","str1","str2","concat","Copiar","fetchDog","fetch","then","response","json","ok","Promise","resolve","reject","module","exports"],"mappings":"AACA,MAAMA,YAAY,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAA3B;;AACA,MAAMC,aAAa,GAAIC,GAAD,IAASA,GAAG,CAACC,WAAJ,EAA/B;;AACA,MAAMC,cAAc,GAAIF,GAAD,IAAUA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAjC;;AACA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,CAACE,MAAL,CAAYD,IAAZ,CAAtC;;AAEAE,MAAM;;AACN,SAASC,QAAT,GAAoB;AAClB,SAAOC,KAAK,CAAC,yCAAD,CAAL,CAAiDC,IAAjD,CAAsDC,QAAQ,IACnEA,QAAQ,CACLC,IADH,GAEGF,IAFH,CAEQE,IAAI,IACRD,QAAQ,CAACE,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAH1C,CADK,CAAP;AAOD;;AACDK,MAAM,CAACC,OAAP,GAAiB;AAAEV,EAAAA;AAAF,CAAjB;AAGAS,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,aADe;AAEfG,EAAAA,cAFe;AAGfE,EAAAA;AAHe,CAAjB;AAMAc,MAAM,CAACC,OAAP,GAAiB;AAAExB,EAAAA;AAAF,CAAjB","sourcesContent":["\nconst randomNumber = () => Math.floor(Math.random() * 101);\nconst firstFunction = (str) => str.toUpperCase();\nconst secondFunction = (str) =>  str.charAt(0);\nconst thirdFunction = (str1, str2) => str1.concat(str2);\n\nCopiar\nfunction fetchDog() {\n  return fetch(\"https://dog.ceo/api/breeds/image/random\").then(response =>\n    response\n      .json()\n      .then(json =>\n        response.ok ? Promise.resolve(json) : Promise.reject(json)\n      )\n  );\n}\nmodule.exports = { fetchDog };\n\n\nmodule.exports = {\n  firstFunction,\n  secondFunction,\n  thirdFunction,\n};\n\nmodule.exports = { randomNumber };\n"]},"metadata":{},"sourceType":"module"}